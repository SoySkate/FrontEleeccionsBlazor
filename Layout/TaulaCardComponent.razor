@using BackEleccionsM.Dto
@inject HttpClient Http

<div class="">
	<table class="table table-striped table-bordered" id="taula">
		<thead>
			<tr>

				<th>NomTaula</th>
				<th>VotsNul</th>
				<th>VotsBlanc</th>
				<th>VotsTotals</th>
				<th>Participació</th>
				<th>VotsEscrotats</th>


				@foreach (var vot in Vots)
				{

					<th> @(myDictionary.ContainsKey(vot.PartitId) ? myDictionary[vot.PartitId] : "Partit Desconegut")</th>

				}
			</tr>
		</thead>
		<tbody>
			<tr>
			<td>@Taula.NomTaula</td>
			<td>@ResultatsTaula.VotsNul</td>
			<td>@ResultatsTaula.VotsBlanc</td>
			<td>@ResultatsTaula.VotsTotals</td>
			<td>@Participacio %</td>
			<td>@VotsEscrotats</td>

		
		@foreach(var vot in Vots)
		{
			
			<td> @vot.NumeroVotsLlista</td>

		}
			</tr>
		</tbody>
	</table>
</div>


@code {
	//results y vots
	[Parameter]
	public TaulaElectoralDto Taula { get; set; }
	[Parameter]
	public List<TaulaElectoralDto> Taules { get; set; }

	public ResultatsTaulaDto ResultatsTaula { get; set; } = new ResultatsTaulaDto();

	public List<VotsPerPartitDto> Vots { get; set; } = new List<VotsPerPartitDto>();
	[Parameter]
	public List<PartitPoliticDto> Partits { get; set; }

	public double Participacio { get; set;}
	public int VotsEscrotats { get; set;}
	//public double VotsEscPercent { get; set;}

	private Dictionary<int, string> myDictionary = new Dictionary<int, string>();

	// Este método se llama cada vez que cambian las propiedades recibidas desde el padre
	protected override async Task OnParametersSetAsync()
	{
		myDictionary.Clear();
		foreach (var partit in Partits)
		{
			if (!myDictionary.ContainsKey(partit.ID))
			{
				myDictionary.Add(partit.ID, partit.NomPartit);
			}
		}

		// Actualiza los datos para la nueva Taula
		await getResultatsT(Taula);
		await getVotsResultat(ResultatsTaula);
		// Calcula la participació després que ResultatsTaula i Taula estiguin actualitzats
		participacio();

		// Actualitza la interfície si cal
		StateHasChanged();
	}
	void participacio()
	{
		double val;
		double roundedv;
		double rvot;
		double r;
		Participacio = 0;
		VotsEscrotats = 0;
		if (Taula.CensTaula > 0) // Evita divisió per zero
		{
			val = (ResultatsTaula.VotsTotals / (double)Taula.CensTaula) * 100;
			roundedv = Math.Round(val, 2);
			Participacio = roundedv;

		}
		else
		{
			Participacio = 0; // Assigna 0 si no hi ha cens
		}
		foreach(var vot in Vots)
		{
			VotsEscrotats += vot.NumeroVotsLlista;
		}
		VotsEscrotats += ResultatsTaula.VotsNul;
		VotsEscrotats += ResultatsTaula.VotsBlanc;
		// if (Taula.CensTaula > 0)
		// {
		// 	r = (VotsEscrotats / (double)Taula.CensTaula) * 100;
		// 	rvot = Math.Round(r, 2);
		// 	VotsEscPercent = rvot;
		// }

	}
	async Task getResultatsT(TaulaElectoralDto taula)
	{
		if (taula != null)
		{
			var resultatT = await Http.GetFromJsonAsync<ResultatsTaulaDto>($"api/ResultatsTaula/taulaID/{taula.ID}");
			ResultatsTaula = resultatT;
		}
	}
	async Task getVotsResultat(ResultatsTaulaDto result)
	{
		if (result != null && result.ID > 0)
		{
			var vots = await Http.GetFromJsonAsync<List<VotsPerPartitDto>>($"api/VotsPerPartit/resultatTaulaID/{result.ID}");
			Vots = vots;
		}
	}

}
