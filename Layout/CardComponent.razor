@using BackEleccionsM.Dto
@inject HttpClient Http
@inject SignalRService SignalRService


<div class="row-2 align-content-center">

	<div class="">
		<ul class="d-sm-flex list-unstyled justify-content-between">
			@foreach (var muni in Municipis)
			{
				<li class="bg-muni" @onclick="() => SelectMunicipi(muni)"><MuniComponent Municipi="muni" /></li>
			}
		</ul>
		<div class="d-sm-flex justify-content-evenly">
			@if (SelectedMuni != null && !string.IsNullOrWhiteSpace(SelectedMuni.NomMunicipi))
		{
				<div class="recuadro">
				<h5>Partits Polítics</h5>
				<ul>
					@foreach (var partit in Partits)
					{
							<li @onclick="() => selectPartit(partit)" class="@(SelectedPartit==partit?"subrallado":"")"><PartitComponent Partit="partit" /></li>
					}
				</ul>
					<button class="btn btn-outline-success" @onclick="visiblePartitC">CrearPartit</button>
					<div class="@(!isVisiblePartitC ? "show" : "visually-hidden")">
						<input type="text" name="name" @bind-value="Partit.NomPartit" placeholder="Crear Nom Partit" />
						<button class="btn btn-outline-success" @onclick="() => createPartit(Partit, SelectedMuni.ID)">Crear Partit</button>
					</div>
					@if (SelectedPartit != null && !string.IsNullOrWhiteSpace(SelectedPartit.NomPartit))
				{
						<button class="btn btn-outline-primary" @onclick="visiblePartitU">UpdatePartit</button>
						<div class="@(!isVisiblePartitU ? "show" : "visually-hidden")">
							<input type="text" name="name" @bind-value="SelectedPartit.NomPartit" placeholder="Nom Partit" />
							<button class="btn btn-outline-primary" @onclick="() => updatePartit(SelectedPartit)">Actualitzar Partit</button>
						</div>

					
						<buton class="btn btn-outline-danger" @onclick="()=>deletePartit(SelectedPartit)">Delete Selected Partit</buton>
				<div class="recuadro">
					<h5>Candidats</h5>
					<ol>
						@foreach (var candidat in Candidats)
						{
								<li @onclick="() => selectCandidat(candidat)" class="@(SelectedCandidat == candidat ? "subrallado" : "")"><CandidatComponent Candidat="candidat" /></li>
						}
					</ol>

						<button class="btn btn-outline-success" @onclick="visibleCandidatC">CrearCandidat</button>
						<div class="@(!isVisibleCandidatC ? "show" : "visually-hidden")">
							<input type="text" name="name" @bind-value="Candidat.NomCandidat" placeholder="Crear Nom Candidat" />
							<button class="btn btn-outline-success" @onclick="() => createCandidat(Candidat, SelectedPartit.ID)">Crear</button>
						</div>
					@if(SelectedCandidat !=null && !string.IsNullOrWhiteSpace(SelectedCandidat.NomCandidat)){
							<button class="btn btn-outline-primary" @onclick="visibleCandidatU">UpdateCandidat</button>
					<div class="@(!isVisibleCandidatU ? "show" : "visually-hidden")">
						<input type="text" name="name" @bind-value="SelectedCandidat.NomCandidat" placeholder="Nom Candidat" />
						<button class="btn btn-outline-primary" @onclick="() => updateCandidat(SelectedCandidat)">Actualitzar Candidat</button>
					</div>
							<buton class="btn btn-outline-danger" @onclick="()=>deleteCandidat(SelectedCandidat)">Delete Selected Candidat</buton>
					}
				</div>
				}	
	
				<!--<button class="btn-primary" onclick="() => createPartit(Partit, SelectedMuni.ID)">Crear Partit</button>-->
			</div>
				<div class="recuadro">
				<h5>Taules Electorals</h5>
				<ul>
					@foreach(var taula in Taules)
					{
						<li @onclick="()=> selectedTaula(taula)" class="@(SelectedTaula == taula?"subrallado":"")"><TaulaEComponent Taula="taula" /></li>
					}
				</ul>
					<button class="btn btn-outline-success" @onclick="visibleTaulaC">CrearTaula</button>
					<div class="@(!isVisibleTaulaC ? "show" : "visually-hidden")">
						<input type="text" name="name" @bind-value="Taula.NomTaula" placeholder="Crear Nom Taula" />
						<input type="number" name="name" @bind-value="Taula.CensTaula" placeholder="Crear Cens Taula" />
						<button class="btn btn-outline-success" @onclick="() => createTaula(Taula, SelectedMuni.ID)">Crear Taula</button>
					</div>
					@if (SelectedTaula != null && !string.IsNullOrWhiteSpace(SelectedTaula.NomTaula)){
						<button class="btn btn-outline-primary" @onclick="visibleTaulaU">UpdateTaula</button>
				<div class="@(!isVisibleTaulaU ? "show" : "visually-hidden")">
					<input type="text" name="name" @bind-value="SelectedTaula.NomTaula" placeholder="Nom Taula" />
					<input type="number" name="name" @bind-value="SelectedTaula.CensTaula" placeholder="Cens Taula" />
							<button class="btn btn-outline-primary" @onclick="() => updateTaula(SelectedTaula)">Actualitzar Taula</button>
				</div>
						<buton class="btn btn-outline-danger" @onclick="()=>deleteTaula(SelectedTaula)">Delete Selected Taula</buton>
					}
			</div>
		}
		</div>
	</div>
</div>


@code {

	[Parameter]
	public MunicipiDto Municipi { get; set; } 

	[Parameter]
	public List<MunicipiDto> Municipis { get; set; }

	[Parameter]
	public MunicipiDto SelectedMuni { get; set; }
	[Parameter]
	public EventCallback<MunicipiDto> OnMunicipiSelected { get; set; }

	//partitsP
	private PartitPoliticDto Partit { get; set; } = new PartitPoliticDto();
	private PartitPoliticDto SelectedPartit { get; set; } = new PartitPoliticDto();
	public List<PartitPoliticDto> Partits { get; set; } = new List<PartitPoliticDto>();

	//Candidats
	private CandidatDto Candidat { get; set; } = new CandidatDto();
	private CandidatDto SelectedCandidat { get; set; } = new CandidatDto();
	private List<CandidatDto> Candidats { get; set; } = new List<CandidatDto>();

	//taulesElectorasl
	private TaulaElectoralDto Taula { get; set; } = new TaulaElectoralDto();
	private TaulaElectoralDto SelectedTaula { get; set; } = new TaulaElectoralDto();
	private List<TaulaElectoralDto> Taules { get; set; } = new List<TaulaElectoralDto>();

	//bool visible buttons
	private bool isVisiblePartitC { get; set; } = true;
	private bool isVisiblePartitU { get; set; } = true;

	//taules bool
	private bool isVisibleTaulaC { get; set; } = true;
	private bool isVisibleTaulaU { get; set; } = true;

	//candidat bool
	private bool isVisibleCandidatC { get; set; } = true;
	private bool isVisibleCandidatU { get; set; } = true;

	void clearVars()
	{
		SelectedCandidat = new CandidatDto() ;
		SelectedPartit = new PartitPoliticDto();
		SelectedTaula = new TaulaElectoralDto();
		Taules.Clear();
		Partits.Clear();
		Candidats.Clear();
	}

	// Método para manejar la selección de un municipio
	async Task SelectMunicipi(MunicipiDto municipi)
	{
		clearVars();
		SelectedMuni = municipi;
		Console.WriteLine("Selecting ID muni: "+ SelectedMuni.ID);
		//Invoke lo que hace es "invocar" la funcion de HandleMunicipiSelected()
		//desde el componente hijo: <ComponenteHijo OnMunicipiSelected="@HandleMunicipiSelected/>
		await OnMunicipiSelected.InvokeAsync(SelectedMuni); //le envia la info al padre
		await getPartits(SelectedMuni);
		await getTaules(SelectedMuni);
		Console.WriteLine(SelectedPartit.NomPartit+"Vemos que partido esta seleccionado");
	}
	async Task selectPartit(PartitPoliticDto partit)
	{
		SelectedPartit = partit;
		Console.WriteLine("Partido selected: "+SelectedPartit);
		await getCandidats(SelectedPartit);
	}
	void selectCandidat(CandidatDto candidat)
	{
		SelectedCandidat = candidat;
	}
	void selectedTaula(TaulaElectoralDto taula)
	{
		SelectedTaula = taula;
	}
	//Funcions per fer els gets taules, partits i candidats
	async Task getCandidats(PartitPoliticDto partit)
	{
		var candidats = await Http.GetFromJsonAsync<List<CandidatDto>>($"api/Candidat/partit/{partit.ID}");
		Candidats = candidats;
	}
	async Task getPartits(MunicipiDto Idmuni)
	{
		var partits = await Http.GetFromJsonAsync<List<PartitPoliticDto>>($"api/PartitPolitic/muniID/{Idmuni.ID}");
		Partits = partits;

	}
	async Task getTaules(MunicipiDto Idmuni)
	{
		var taules = await Http.GetFromJsonAsync<List<TaulaElectoralDto>>($"api/TaulaElectoral/muniID/{Idmuni.ID}");
		Taules = taules;
	}

	//Funcions per togle buttons
	void visiblePartitC()
	{
		isVisiblePartitC = !isVisiblePartitC;
	}
	void visiblePartitU()
	{
		isVisiblePartitU = !isVisiblePartitU;
	}
	void visibleTaulaC()
	{
		isVisibleTaulaC = !isVisibleTaulaC;
	}
	void visibleTaulaU()
	{
		isVisibleTaulaU = !isVisibleTaulaU;
	}
	void visibleCandidatC()
	{
		isVisibleCandidatC = !isVisibleCandidatC;
	}
	void visibleCandidatU()
	{
		isVisibleCandidatU = !isVisibleCandidatU;
	}

	//CRUD PARTIT
	async Task createPartit(PartitPoliticDto Partit, int IdMuni)
	{
		//o bien pongo dynamic que es menos seguro ya que al compilar no mira si es el dato correcto
		//o bien creo un dto conla class Municipi con lo necesario
		Partit.MunicipiId = IdMuni;

		var response = await Http.PostAsJsonAsync("api/PartitPolitic", Partit);
		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("PartidoP creado correctamente");
			await getPartits(SelectedMuni);
		}
		else { Console.WriteLine("Error al crear el PartidoP"); }
	}

	async Task deletePartit(PartitPoliticDto Partit)
	{
		var response = await Http.DeleteAsync($"api/PartitPolitic/{Partit.ID}");
		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("PartidoP eliminado correctamente");
			await getPartits(SelectedMuni);
		}
		else { Console.WriteLine("Error al eliminar el PartidoP"); }
	}
	//update partit
	async Task updatePartit(PartitPoliticDto Partit)
	{
		var response = await Http.PutAsJsonAsync($"api/PartitPolitic/{Partit.ID}", Partit);
		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("PartidoP actualizado correctamente");
			await getPartits(SelectedMuni);
		}
		else { Console.WriteLine("Error al actualizar el PartidoP"); }
	}
	// Método para manejar las actualizaciones que llegan desde SignalR
	// private void OnPartitUpdated(PartitPoliticDto partitUpdate)
	// {
	// 	var index = Partits.FindIndex(p => p.ID == partitUpdate.ID);
	// 	if (index != -1)
	// 	{
	// 		Partits[index] = partitUpdate; Actualiza el partido en la lista local
	// 	}
	// 	else
	// 	{
	// 		Partits.Add(partitUpdate); Si el partido no está en la lista, lo agrega
	// 	}

	// 	Esto asegura que la interfaz de usuario se actualice
	// 	StateHasChanged();
	// }
	// Inicializa la conexión de SignalR y se suscribe al evento
	// protected override async Task OnInitializedAsync()
	// {
	// 	Inicia la conexión de SignalR
	// 	await SignalRService.StartAsync();

	// 	Se suscribe al evento de actualización de partidos
	// 	SignalRService.PartitUpdated += OnPartitUpdated;
	// }

	// Limpiar la suscripción cuando el componente se destruya
	// public async ValueTask DisposeAsync()
	// {
	// 	SignalRService.PartitUpdated -= OnPartitUpdated;
	// 	await SignalRService.DisposeAsync();
	// }
	//CRUD TAULA
	async Task deleteTaula(TaulaElectoralDto taula)
	{
		var response = await Http.DeleteAsync($"api/TaulaElectoral/{taula.ID}");
		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("TaulaElectoral eliminada correctamente");
			await getTaules(SelectedMuni);
		}
		else { Console.WriteLine("Error al eliminar la TaulaElectoral"); }
	}
	async Task updateTaula(TaulaElectoralDto taula)
	{
		var response = await Http.PutAsJsonAsync($"api/TaulaElectoral/{taula.ID}", taula);
		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("TaulaElectoral actualizada correctamente");
			await getTaules(SelectedMuni);
		}
		else { Console.WriteLine("Error al actualizar la TaulaElectoral"); }
	}
	async Task createTaula(TaulaElectoralDto taula, int IdMuni)
	{
		taula.MunicipiId = IdMuni;

		var response = await Http.PostAsJsonAsync("api/TaulaElectoral", taula);
		var listT = await Http.GetFromJsonAsync<List<TaulaElectoralDto>>($"api/TaulaElectoral/muniID/{IdMuni}");
		var currentT = listT.Where(t => t.NomTaula == taula.NomTaula).FirstOrDefault();

		var result = new ResultatsTaulaDto();
		result.TaulaElectoralId = currentT.ID;
		Console.WriteLine("ID taulacreada: " + currentT.ID);
		//como la relacion es 1 a 1 creamos al mismo tiempo el resultat taula

		await Http.PostAsJsonAsync("api/ResultatsTaula", result);

		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("TaulaElectoral creada correctamente");
			await getTaules(SelectedMuni);
		}
		else { Console.WriteLine("Error al crear la TaulaElectoral"); }
	}

	//CRUD CANDIDAT
	async Task createCandidat(CandidatDto candidat, int IdPartit)
	{
		candidat.PartitPoliticId = IdPartit;

		var response = await Http.PostAsJsonAsync("api/Candidat", candidat);
		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("Candidat creado correctamente");
			await getCandidats(SelectedPartit);
		}
		else { Console.WriteLine("Error al crear el Candidat"); }
	}
	async Task updateCandidat(CandidatDto candidat)
	{
		var response = await Http.PutAsJsonAsync($"api/Candidat/{candidat.ID}", candidat);
		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("Candidat actualizado correctamente");
			await getCandidats(SelectedPartit);
		}
		else { Console.WriteLine("Error al actualizar el Candidat"); }
	}
	async Task deleteCandidat(CandidatDto candidat)
	{
		var response = await Http.DeleteAsync($"api/Candidat/{candidat.ID}");
		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("Candidat eliminado correctamente");
			await getCandidats(SelectedPartit);
		}
		else { Console.WriteLine("Error al eliminar el Candidat"); }
	}
}

