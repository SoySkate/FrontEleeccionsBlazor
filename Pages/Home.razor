@page "/"
@using System.Net.Http.Json
@using BackEleccionsM.Dto
@using System.Text
@using FrontEleccM.FrontServices
@using FrontEleccM.Utils
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AuthStateService AuthStateService

<PageTitle>Home</PageTitle>
<div class="d-flex justify-content-center align-items-center mt-lg-5">
    <div>
        @if (!registerbool)
{
    <h2>Login</h2>
}
else
{
     <h2>Register</h2>
}

<p>Introduce tus credenciales:</p>

<div class="@(!registerbool ? "show" : "visually-hidden")">
    <div><input @bind="loginDto.Username" placeholder="Usuario" /></div>
    <div><input @bind="loginDto.Password" placeholder="Contraseña" type="password" />
</div>
    <div><label>
        <input type="checkbox" @bind="loginDto.RememberMe" /> Recordar mis credenciales
        </label>
    </div>
    <div> <button @onclick="() => Login()">Iniciar Sesión</button></div>
</div>
   
<div class="@(registerbool ? "show" : "visually-hidden")">
    <div><input @bind="registerDto.Username" placeholder="Usuario" /></div>
    <div> <input @bind="registerDto.Password" placeholder="Contraseña" type="password" />  </div>

    <div><input @bind="registerDto.Email" placeholder="Email" type="email" />  </div>
       <div> <button @onclick="() => Register()">Registrarse </button>
    </div>
</div>
    <button @onclick="()=>changetextAndBool()" class="p-2 my-2">@butonregisterText</button>
    <p class="fw-bold">@registerMessage</p>

<p class="fw-bold">@message</p>
    </div>
</div>
@code {
    private RegisterDto registerDto = new RegisterDto();
    private string registerMessage;
    private LoginDto loginDto = new LoginDto();
    private string message;
    private string UserConnected;
    private string butonregisterText = "¿No tienes cuenta? ¡Haz click y regístrate!";
    private bool registerbool=false;

    private async Task Login()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginDto);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null)
                {
                    if (loginDto.RememberMe)
                    {
                        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "authToken", result.Token);
                    }
                   
                    UserConnected = TokenUtils.DecodeJwt(result.Token);
                    AuthStateService.NotifyAuthStateChanged(); // Notifica cambio de estado
                    message = "Login exitoso. Bienvenido/a " + UserConnected;
                }
                else
                {
                    message = "Error al procesar la respuesta.";
                }
            }
            else
            {
                message = "Error en el login.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private async Task Register()
    {
        var response = await Http.PostAsJsonAsync("api/auth/register", registerDto);
        if (response.IsSuccessStatusCode)
        {
            registerMessage = "Registro exitoso. Ahora puedes iniciar sesión.";
        }
        else
        {
            registerMessage = "Error al registrar. Verifica los datos.";
        }
    }
    private void changetextAndBool()
    {
        registerbool = !registerbool;
        if (butonregisterText == "¿No tienes cuenta? ¡Haz click y regístrate!")
        {
            butonregisterText = "¿Ya tienes una cuenta? ¡Haz click e inicia sesión!";
        }
        else { butonregisterText = "¿No tienes cuenta? ¡Haz click y regístrate!"; }
    }
}
