@page "/config"
@using BackEleccionsM.Dto
@using FrontEleccM.FrontServices
@using Microsoft.AspNetCore.Components.Authorization
@inject MunicipiService MunicipiService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleService RoleService
@inject NavigationManager Navigation

<PageTitle>Configuració Eleccions</PageTitle>

@if (IsAuthenticated){
    if (IsModerator){
<div class="p-sm-2">
	<!--update-->
        <div class="sticky-top">
            <!--no esta bien hecho el visible or not-->
            @if (SelectedMuni != null)
            {
                <div class="d-flex justify-content-center bg-light border-2 rounded-3">
                    <!--SOLUCIONAR STO TAMBIEN-->
                    <h3 class="font-monospace subrallado"> @SelectedMuni.NomMunicipi</h3>
                </div>
            }
        </div>
    <div class="d-sm-flex justify-content-evenly p-3">
            <div>
                <button class="btn btn-outline-primary" @onclick="visibleMuniU">UpdateMuni</button>
                <!-- Cambia la clase en función del estado de isMuniVisible -->
                <div class="@(!isMuniUpdateVisible ? "show" : "visually-hidden")">
                    <input type="text" id="muni" @bind-value="SelectedMuni.NomMunicipi" placeholder="Nom del Municipi" />
                    <p>Regidors:</p>
                    <input type="number" id="regid" @bind-value="SelectedMuni.NumeroRegidors" placeholder="Número de regidors" />
                    <p>Percentatge mínim establert:</p>
                    <input type="number" id="percent" @bind-value="SelectedMuni.PercentatgeMinimEstablert" placeholder="MinimPercentatgeEstablert " />
                    <button class="btn btn-outline-primary" @onclick="() => updateMuni(SelectedMuni)">Actualitza</button>
                </div>
            </div>
            <!-- to create muni visible/not-->
    
            <div class="py-2 p-sm-0">
                <button class="btn btn-outline-success" @onclick="visibleMuniC">CrearMuni</button>
                <!-- Cambia la clase en función del estado de isMuniVisible -->
                <div class="@(!isMuniVisible ? "show" : "visually-hidden")">
                    <input type="text" id="muni" @bind-value="Muni.NomMunicipi" placeholder="Introdueix el Municipi" />
                    <p>NUM regidors:</p>
                    <input type="number" id="regid" @bind-value="Muni.NumeroRegidors" placeholder="Introdueix el número de regidors" />
                <p>Percentatgemínim establert:</p>
                <input type="number" id="percent" @bind-value="Muni.PercentatgeMinimEstablert" placeholder="MinimPercentatgeEstablert " />
                    <button class="btn btn-outline-success" @onclick="() => createMunicipi(Muni)">Crear Municipi</button>
                </div>
            </div>
           <div>
                <buton class="btn btn-outline-danger" @onclick="()=>deleteMuni(SelectedMuni)">Delete Selected Municipi</buton>
           </div>
        </div>

        <div class="recuadro">
            <!--1-Omitting ""el simbolo arroba" for variables and properties keeps the code clean and concise.
                2-Using "el simbolo arroba" for methods ensures proper delegate binding and avoids ambiguity.
            -->
        <h5>Municipis</h5>
            <CardComponent Municipi="SelectedMuni" Municipis="Municipis" OnMunicipiSelected="@HandleMunicipiSelected" /> <!--OnMunicipiSelected="HandleMunicipiSelected"-->

        </div>
        </div>
    }
    else
    {
        <h3>Lo sentimos, no tienes acceso a esta página, no eres un usuario administrador ;/</h3>
    }
    }
    else
    {
        <div class="justify-content-center">
    <h3>Lo sentimos, no tienes acceso a esta página, no estas registrado.</h3>
    <a href="/" class="btn btn-dark">Ir a loguearse o reistrarse</a>
    </div>

    }



@code {
    public MunicipiDto Muni { get; set; } = new MunicipiDto();
    private MunicipiDto SelectedMuni { get; set; } = new MunicipiDto();
    private List<MunicipiDto> Municipis { get; set; } = new List<MunicipiDto>();
    private double MinimPercent { get; set; } = 0;
    public Dictionary<int, double> DicMinimPercent { get; set; } = new Dictionary<int, double>();
    private bool IsModerator;
    private bool IsUserRol;
    private bool IsAuthenticated;

    void HandleMunicipiSelected(MunicipiDto municipi)
    {
        SelectedMuni = municipi;
        Console.WriteLine($"Municipio seleccionado en el padre: {SelectedMuni.NomMunicipi} + id: {SelectedMuni.ID}");
    }
    // Variable para controlar la visibilidad
    private bool isMuniVisible { get; set; } = true;
    private bool isMuniUpdateVisible { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        IsModerator = await RoleService.IsInRoleAsync("Moderator");
        IsUserRol = await RoleService.IsInRoleAsync("User");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAuthenticated = user.Identity.IsAuthenticated;

        var token = await MunicipiService.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            // Utiliza el token para establecer la autenticación
            await MunicipiService.SetAuthorizationHeaderAsync(token); // (Paso 3)
        }
        else
        {
            // Manejar el caso en que no haya token
            Console.WriteLine("No se encontró token en el sessionStorage");
        }
        await GetMunis();
        // await MunicipiService.SetAuthorizationHeaderAsync();
        // await GetMunis();
        // foreach (var min in Municipis)
        // {
        //     DicMinimPercent.Add(min.ID, MinimPercent);
        // }
    }
    async Task createMunicipi(MunicipiDto Muni)
    {
        // var muni = new { nomMunicipi = Muni.NomMunicipi, numeroRegidors = Muni.NumeroRegidors };
        var municipioCreado = new MunicipiDto
            {
                NomMunicipi = Muni.NomMunicipi,
                NumeroRegidors = Muni.NumeroRegidors,
                PercentatgeMinimEstablert = Muni.PercentatgeMinimEstablert
            };

        // Limpiar antes de enviar la solicitud
        Muni.NomMunicipi = string.Empty;
        Muni.NumeroRegidors = 0;
        Muni.PercentatgeMinimEstablert = 0;

        var response = await Http.PostAsJsonAsync("api/Municipi", municipioCreado);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Municipio creado correctamente");
            await GetMunis();
        }
        else
        {
            Console.WriteLine("Error al crear el municipio");
        }
        visibleMuniC();
    }
    async Task updateMuni(MunicipiDto Muni)
    {
        var response = await Http.PutAsJsonAsync($"api/Municipi/{Muni.ID}", Muni);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Municipio Actualizado correctamente");
            await GetMunis();
        }
        else
        {
            Console.WriteLine("Error al actualizar el municipio");
        }
    }
    async Task deleteMuni(MunicipiDto Muni)
    {
        Console.WriteLine("Calling delete funcion.....");
        Console.WriteLine(SelectedMuni);
        var response = await Http.DeleteAsync($"api/Municipi/{Muni.ID}");

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Municipio eliminado correctamente");
            await GetMunis();
        }
        else
        {
            Console.WriteLine("Error al eliminado el municipio");
        }
        // Limpiar antes de enviar la solicitud
        Muni.NomMunicipi = string.Empty;
        Muni.NumeroRegidors = 0;
        Muni.PercentatgeMinimEstablert = 0;
    }

    void visibleMuniC()
    {
        isMuniVisible = !isMuniVisible; // Alterna la visibilidad
    }
    void visibleMuniU()
    {
        isMuniUpdateVisible = !isMuniUpdateVisible; // Alterna la visibilidad
    }

    async Task GetMunis()
    {
        try
        {
            var munis = await Http.GetFromJsonAsync<List<MunicipiDto>>("api/Municipi");
            if (munis != null)
            {
                foreach (var muni in munis)
                {
                    Console.WriteLine($"Municipi recibido: ID={muni.ID}, Nombre={muni.NomMunicipi}, Regidors={muni.NumeroRegidors}");
                }
                Municipis = munis;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener municipios: {ex.Message}");
        }
    }
}
